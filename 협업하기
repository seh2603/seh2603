Github에서 로그인을 한 다음 New repository를 눌러 새로운 레파지토리를 생성

저장소 이름(Repository name)과 설명(Description)을 적고 저장소 생성(Create repository)를 클릭


github에 있는 레파지토리 전체를 다운로드. Clone을 사용하면 자동으로 폴더가 생성되면서 폴더 내부에 git init폴더가 생성

이미 존재하는 폴더에 git init과 remote를 사용해서 해당 폴더의 파일들을 Github에서 Detect 수 있도록 설정
(이미 작업한 내용이 있고, 해당 내용을 깃에 푸쉬하고 싶을때 Remote를 사용)

master.py 생성

push하기
-
git add -A : 해당 폴더에 모든 파일을 추가 합니다.
git commit -m “[커밋메세지]” : 추가된 파일을 커밋합니다.
git push origin master : origin이라는 저장소에 master브런치로 push합니다.
-

깃허브 해당 저장소로 가면 master.py가 업로드 된것을 확인할 수 있음.

브런치(Branch)버튼을 클릭하고 Eunhwa(브런치명)라는 새로운 브런치를 만든다.
기다리면 Eunhwa(브런치명)이라는 브런치가 생성되며 master의 내용들이 자동으로 옮겨진다.

checkout이란 현재 로컬 저장소의 브런치를 변경한다는 의미

-
git fetch : 브런치에 대해 변경되거나 추가된 사항에 대해 정보를 업데이트 합니다.
git checkout [브런치 이름] : 브런치를 변경합니다.
-
git status라는 명령어로 브런치 checkout 상태를 확인할 수 있음.

Git Push 하기

branch.py 생성하기
-
git add -A : 해당 폴더에 모든 파일을 추가 합니다.
git commit -m “[커밋메세지]” : 추가된 파일을 커밋합니다.
git push origin Eunhwa : origin이라는 저장소에 Eunhwa브런치로 push합니다.




Merge 및 충돌 대처하기

Merge
-
git checkout master : master 브런치를 변경합니다.
git merge Jangwon : Jangwon 브런치와 merge합니다.
git push origin master : origin이라는 저장소에 master브런치로 push합니다.
-

두개의 브런치에서 동시에 Push를 하고 merge를 진행하게 되면 충돌이 발생함


-
